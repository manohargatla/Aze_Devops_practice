pool:
  name: Default
  
trigger:
  - master
  
stages:
  - stage: nopcommerce
    displayName: nop build stage

    jobs:
      - job: nopjob
        displayName: build nop package
        steps:

          - task: DotNetCoreCLI@2
            inputs:
              command: build
              projects: '**/*.sln'
              configuration: $(buildConfiguration)
              
          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: True
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: True
            
            # this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)' 
              artifactName: 'nopcommerce'
---

## 
---
pool:
  name: Azure Pipelines
  vmImage: ubuntu-22.04
trigger:
  - master
stages:
  - stage: nopcommerce
    displayName: nop build stage
    jobs:
      - job: nopjob
        displayName: build nop package
        steps:
          - task: DotNetCoreInstaller@1
            inputs:
              packageType: 'sdk'
              version: '7.0.101'
          - task: DotNetCoreCLI@2
            inputs:
              command: build
              projects: '**/*.sln'
              configuration: $(buildConfiguration) 

         # do this after other tasks such as building
          - task: DotNetCoreCLI@2
            inputs:
              command: test
              projects: '**/*Tests/*.csproj'
              arguments: '--configuration $(buildConfiguration)'
            
          # do this after your tests have run
        
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testRunner: VSTest
              testResultsFiles: '**/*.trx'

          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              publishWebProjects: True
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: True
            
            # this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)' 
              artifactName: 'nopcommerce'

          - task: DownloadBuildArtifacts@1
            displayName: Download Artifacts
            inputs:
              artifactName: 'nopcommerce'
              downloadPath: /tmp/

